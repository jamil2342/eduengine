//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EduEnginee.Areas.Admission.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(InstituteCatary))]
    [KnownType(typeof(Institute))]
    public partial class InstituteSubcatary: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public int InstituteCataryId
        {
            get { return _instituteCataryId; }
            set
            {
                if (_instituteCataryId != value)
                {
                    ChangeTracker.RecordOriginalValue("InstituteCataryId", _instituteCataryId);
                    if (!IsDeserializing)
                    {
                        if (InstituteCatary != null && InstituteCatary.Id != value)
                        {
                            InstituteCatary = null;
                        }
                    }
                    _instituteCataryId = value;
                    OnPropertyChanged("InstituteCataryId");
                }
            }
        }
        private int _instituteCataryId;
    
        [DataMember]
        public Nullable<bool> IsEnable
        {
            get { return _isEnable; }
            set
            {
                if (_isEnable != value)
                {
                    _isEnable = value;
                    OnPropertyChanged("IsEnable");
                }
            }
        }
        private Nullable<bool> _isEnable;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public InstituteCatary InstituteCatary
        {
            get { return _instituteCatary; }
            set
            {
                if (!ReferenceEquals(_instituteCatary, value))
                {
                    var previousValue = _instituteCatary;
                    _instituteCatary = value;
                    FixupInstituteCatary(previousValue);
                    OnNavigationPropertyChanged("InstituteCatary");
                }
            }
        }
        private InstituteCatary _instituteCatary;
    
        [DataMember]
        public TrackableCollection<Institute> Institutes
        {
            get
            {
                if (_institutes == null)
                {
                    _institutes = new TrackableCollection<Institute>();
                    _institutes.CollectionChanged += FixupInstitutes;
                }
                return _institutes;
            }
            set
            {
                if (!ReferenceEquals(_institutes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_institutes != null)
                    {
                        _institutes.CollectionChanged -= FixupInstitutes;
                    }
                    _institutes = value;
                    if (_institutes != null)
                    {
                        _institutes.CollectionChanged += FixupInstitutes;
                    }
                    OnNavigationPropertyChanged("Institutes");
                }
            }
        }
        private TrackableCollection<Institute> _institutes;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            InstituteCatary = null;
            Institutes.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupInstituteCatary(InstituteCatary previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.InstituteSubcataries.Contains(this))
            {
                previousValue.InstituteSubcataries.Remove(this);
            }
    
            if (InstituteCatary != null)
            {
                if (!InstituteCatary.InstituteSubcataries.Contains(this))
                {
                    InstituteCatary.InstituteSubcataries.Add(this);
                }
    
                InstituteCataryId = InstituteCatary.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InstituteCatary")
                    && (ChangeTracker.OriginalValues["InstituteCatary"] == InstituteCatary))
                {
                    ChangeTracker.OriginalValues.Remove("InstituteCatary");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InstituteCatary", previousValue);
                }
                if (InstituteCatary != null && !InstituteCatary.ChangeTracker.ChangeTrackingEnabled)
                {
                    InstituteCatary.StartTracking();
                }
            }
        }
    
        private void FixupInstitutes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Institute item in e.NewItems)
                {
                    item.InstituteSubcatary = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Institutes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Institute item in e.OldItems)
                {
                    if (ReferenceEquals(item.InstituteSubcatary, this))
                    {
                        item.InstituteSubcatary = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Institutes", item);
                    }
                }
            }
        }

        #endregion

    }
}
