//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EduEnginee.Areas.Admission.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Circular))]
    [KnownType(typeof(Institute))]
    public partial class Comment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> InstituteId
        {
            get { return _instituteId; }
            set
            {
                if (_instituteId != value)
                {
                    ChangeTracker.RecordOriginalValue("InstituteId", _instituteId);
                    if (!IsDeserializing)
                    {
                        if (Institute != null && Institute.Id != value)
                        {
                            Institute = null;
                        }
                    }
                    _instituteId = value;
                    OnPropertyChanged("InstituteId");
                }
            }
        }
        private Nullable<int> _instituteId;
    
        [DataMember]
        public string CommentText
        {
            get { return _commentText; }
            set
            {
                if (_commentText != value)
                {
                    _commentText = value;
                    OnPropertyChanged("CommentText");
                }
            }
        }
        private string _commentText;
    
        [DataMember]
        public int CircularId
        {
            get { return _circularId; }
            set
            {
                if (_circularId != value)
                {
                    ChangeTracker.RecordOriginalValue("CircularId", _circularId);
                    if (!IsDeserializing)
                    {
                        if (Circular != null && Circular.Id != value)
                        {
                            Circular = null;
                        }
                    }
                    _circularId = value;
                    OnPropertyChanged("CircularId");
                }
            }
        }
        private int _circularId;
    
        [DataMember]
        public bool IsEnable
        {
            get { return _isEnable; }
            set
            {
                if (_isEnable != value)
                {
                    _isEnable = value;
                    OnPropertyChanged("IsEnable");
                }
            }
        }
        private bool _isEnable;
    
        [DataMember]
        public string CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private string _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> CreatedDate
        {
            get { return _createdDate; }
            set
            {
                if (_createdDate != value)
                {
                    _createdDate = value;
                    OnPropertyChanged("CreatedDate");
                }
            }
        }
        private Nullable<System.DateTime> _createdDate;
    
        [DataMember]
        public string UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private string _updatedBy;
    
        [DataMember]
        public Nullable<System.DateTime> UpdatedDate
        {
            get { return _updatedDate; }
            set
            {
                if (_updatedDate != value)
                {
                    _updatedDate = value;
                    OnPropertyChanged("UpdatedDate");
                }
            }
        }
        private Nullable<System.DateTime> _updatedDate;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Circular Circular
        {
            get { return _circular; }
            set
            {
                if (!ReferenceEquals(_circular, value))
                {
                    var previousValue = _circular;
                    _circular = value;
                    FixupCircular(previousValue);
                    OnNavigationPropertyChanged("Circular");
                }
            }
        }
        private Circular _circular;
    
        [DataMember]
        public Institute Institute
        {
            get { return _institute; }
            set
            {
                if (!ReferenceEquals(_institute, value))
                {
                    var previousValue = _institute;
                    _institute = value;
                    FixupInstitute(previousValue);
                    OnNavigationPropertyChanged("Institute");
                }
            }
        }
        private Institute _institute;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Circular = null;
            Institute = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCircular(Circular previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Comments.Contains(this))
            {
                previousValue.Comments.Remove(this);
            }
    
            if (Circular != null)
            {
                if (!Circular.Comments.Contains(this))
                {
                    Circular.Comments.Add(this);
                }
    
                CircularId = Circular.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Circular")
                    && (ChangeTracker.OriginalValues["Circular"] == Circular))
                {
                    ChangeTracker.OriginalValues.Remove("Circular");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Circular", previousValue);
                }
                if (Circular != null && !Circular.ChangeTracker.ChangeTrackingEnabled)
                {
                    Circular.StartTracking();
                }
            }
        }
    
        private void FixupInstitute(Institute previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Comments.Contains(this))
            {
                previousValue.Comments.Remove(this);
            }
    
            if (Institute != null)
            {
                if (!Institute.Comments.Contains(this))
                {
                    Institute.Comments.Add(this);
                }
    
                InstituteId = Institute.Id;
            }
            else if (!skipKeys)
            {
                InstituteId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Institute")
                    && (ChangeTracker.OriginalValues["Institute"] == Institute))
                {
                    ChangeTracker.OriginalValues.Remove("Institute");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Institute", previousValue);
                }
                if (Institute != null && !Institute.ChangeTracker.ChangeTrackingEnabled)
                {
                    Institute.StartTracking();
                }
            }
        }

        #endregion

    }
}
