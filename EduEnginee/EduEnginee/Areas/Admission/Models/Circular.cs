//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;

namespace EduEnginee.Areas.Admission.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AdmissionType))]
    [KnownType(typeof(Comment))]
    [KnownType(typeof(Subject))]
    [KnownType(typeof(Institute))]
    public partial class Circular: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int InstituteId
        {
            get { return _instituteId; }
            set
            {
                if (_instituteId != value)
                {
                    ChangeTracker.RecordOriginalValue("InstituteId", _instituteId);
                    if (!IsDeserializing)
                    {
                        if (Institute != null && Institute.Id != value)
                        {
                            Institute = null;
                        }
                    }
                    _instituteId = value;
                    OnPropertyChanged("InstituteId");
                }
            }
        }
        private int _instituteId;
    
        [DataMember]
        public byte[] SeatPlan
        {
            get { return _seatPlan; }
            set
            {
                if (_seatPlan != value)
                {
                    _seatPlan = value;
                    OnPropertyChanged("SeatPlan");
                }
            }
        }
        private byte[] _seatPlan;
    
        [DataMember]
        public byte[] Result
        {
            get { return _result; }
            set
            {
                if (_result != value)
                {
                    _result = value;
                    OnPropertyChanged("Result");
                }
            }
        }
        private byte[] _result;
    
        [DataMember]
        public string ResultLink
        {
            get { return _resultLink; }
            set
            {
                if (_resultLink != value)
                {
                    _resultLink = value;
                    OnPropertyChanged("ResultLink");
                }
            }
        }
        private string _resultLink;
    
        [DataMember]
        public string SeatPlanLink
        {
            get { return _seatPlanLink; }
            set
            {
                if (_seatPlanLink != value)
                {
                    _seatPlanLink = value;
                    OnPropertyChanged("SeatPlanLink");
                }
            }
        }
        private string _seatPlanLink;
    
        [DataMember]
        public Nullable<bool> IsEnable
        {
            get { return _isEnable; }
            set
            {
                if (_isEnable != value)
                {
                    _isEnable = value;
                    OnPropertyChanged("IsEnable");
                }
            }
        }
        private Nullable<bool> _isEnable;
    
        [DataMember]
        public string CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private string _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> CreatedDate
        {
            get { return _createdDate; }
            set
            {
                if (_createdDate != value)
                {
                    _createdDate = value;
                    OnPropertyChanged("CreatedDate");
                }
            }
        }
        private Nullable<System.DateTime> _createdDate;
    
        [DataMember]
        public string UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private string _updatedBy;
    
        [DataMember]
        public Nullable<System.DateTime> UpdatedDate
        {
            get { return _updatedDate; }
            set
            {
                if (_updatedDate != value)
                {
                    _updatedDate = value;
                    OnPropertyChanged("UpdatedDate");
                }
            }
        }
        private Nullable<System.DateTime> _updatedDate;
    
        [DataMember]
        public string Session
        {
            get { return _session; }
            set
            {
                if (_session != value)
                {
                    _session = value;
                    OnPropertyChanged("Session");
                }
            }
        }
        private string _session;
    
        [DataMember]
        public string CourseType
        {
            get { return _courseType; }
            set
            {
                if (_courseType != value)
                {
                    _courseType = value;
                    OnPropertyChanged("CourseType");
                }
            }
        }
        private string _courseType;
        [DataType(DataType.MultilineText)]
        [DataMember]
        public string AdmissionReq
        {
            get { return _admissionReq; }
            set
            {
                if (_admissionReq != value)
                {
                    _admissionReq = value;
                    OnPropertyChanged("AdmissionReq");
                }
            }
        }
        private string _admissionReq;
        [DataType(DataType.MultilineText)]
        [DataMember]
        public string ApplyProc
        {
            get { return _applyProc; }
            set
            {
                if (_applyProc != value)
                {
                    _applyProc = value;
                    OnPropertyChanged("ApplyProc");
                }
            }
        }
        private string _applyProc;
    
        [DataMember]
        public Nullable<System.DateTime> AppStart
        {
            get { return _appStart; }
            set
            {
                if (_appStart != value)
                {
                    _appStart = value;
                    OnPropertyChanged("AppStart");
                }
            }
        }
        private Nullable<System.DateTime> _appStart;
    
        [DataMember]
        public Nullable<System.DateTime> AppEnd
        {
            get { return _appEnd; }
            set
            {
                if (_appEnd != value)
                {
                    _appEnd = value;
                    OnPropertyChanged("AppEnd");
                }
            }
        }
        private Nullable<System.DateTime> _appEnd;
    
        [DataMember]
        public Nullable<System.DateTime> SubStart
        {
            get { return _subStart; }
            set
            {
                if (_subStart != value)
                {
                    _subStart = value;
                    OnPropertyChanged("SubStart");
                }
            }
        }
        private Nullable<System.DateTime> _subStart;
    
        [DataMember]
        public Nullable<System.DateTime> SubEnd
        {
            get { return _subEnd; }
            set
            {
                if (_subEnd != value)
                {
                    _subEnd = value;
                    OnPropertyChanged("SubEnd");
                }
            }
        }
        private Nullable<System.DateTime> _subEnd;
    
        [DataMember]
        public Nullable<System.DateTime> EligibleCanDate
        {
            get { return _eligibleCanDate; }
            set
            {
                if (_eligibleCanDate != value)
                {
                    _eligibleCanDate = value;
                    OnPropertyChanged("EligibleCanDate");
                }
            }
        }
        private Nullable<System.DateTime> _eligibleCanDate;
    
        [DataMember]
        public Nullable<System.DateTime> AddDate
        {
            get { return _addDate; }
            set
            {
                if (_addDate != value)
                {
                    _addDate = value;
                    OnPropertyChanged("AddDate");
                }
            }
        }
        private Nullable<System.DateTime> _addDate;
    
        [DataMember]
        public Nullable<System.DateTime> ResDate
        {
            get { return _resDate; }
            set
            {
                if (_resDate != value)
                {
                    _resDate = value;
                    OnPropertyChanged("ResDate");
                }
            }
        }
        private Nullable<System.DateTime> _resDate;
    
        [DataMember]
        public Nullable<int> AdmissionTypeId
        {
            get { return _admissionTypeId; }
            set
            {
                if (_admissionTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("AdmissionTypeId", _admissionTypeId);
                    if (!IsDeserializing)
                    {
                        if (AdmissionType != null && AdmissionType.Id != value)
                        {
                            AdmissionType = null;
                        }
                    }
                    _admissionTypeId = value;
                    OnPropertyChanged("AdmissionTypeId");
                }
            }
        }
        private Nullable<int> _admissionTypeId;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public AdmissionType AdmissionType
        {
            get { return _admissionType; }
            set
            {
                if (!ReferenceEquals(_admissionType, value))
                {
                    var previousValue = _admissionType;
                    _admissionType = value;
                    FixupAdmissionType(previousValue);
                    OnNavigationPropertyChanged("AdmissionType");
                }
            }
        }
        private AdmissionType _admissionType;
    
        [DataMember]
        public TrackableCollection<Comment> Comments
        {
            get
            {
                if (_comments == null)
                {
                    _comments = new TrackableCollection<Comment>();
                    _comments.CollectionChanged += FixupComments;
                }
                return _comments;
            }
            set
            {
                if (!ReferenceEquals(_comments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_comments != null)
                    {
                        _comments.CollectionChanged -= FixupComments;
                    }
                    _comments = value;
                    if (_comments != null)
                    {
                        _comments.CollectionChanged += FixupComments;
                    }
                    OnNavigationPropertyChanged("Comments");
                }
            }
        }
        private TrackableCollection<Comment> _comments;
    
        [DataMember]
        public TrackableCollection<Subject> Subjects
        {
            get
            {
                if (_subjects == null)
                {
                    _subjects = new TrackableCollection<Subject>();
                    _subjects.CollectionChanged += FixupSubjects;
                }
                return _subjects;
            }
            set
            {
                if (!ReferenceEquals(_subjects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_subjects != null)
                    {
                        _subjects.CollectionChanged -= FixupSubjects;
                    }
                    _subjects = value;
                    if (_subjects != null)
                    {
                        _subjects.CollectionChanged += FixupSubjects;
                    }
                    OnNavigationPropertyChanged("Subjects");
                }
            }
        }
        private TrackableCollection<Subject> _subjects;
    
        [DataMember]
        public Institute Institute
        {
            get { return _institute; }
            set
            {
                if (!ReferenceEquals(_institute, value))
                {
                    var previousValue = _institute;
                    _institute = value;
                    FixupInstitute(previousValue);
                    OnNavigationPropertyChanged("Institute");
                }
            }
        }
        private Institute _institute;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AdmissionType = null;
            Comments.Clear();
            Subjects.Clear();
            Institute = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupAdmissionType(AdmissionType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Circulars.Contains(this))
            {
                previousValue.Circulars.Remove(this);
            }
    
            if (AdmissionType != null)
            {
                if (!AdmissionType.Circulars.Contains(this))
                {
                    AdmissionType.Circulars.Add(this);
                }
    
                AdmissionTypeId = AdmissionType.Id;
            }
            else if (!skipKeys)
            {
                AdmissionTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AdmissionType")
                    && (ChangeTracker.OriginalValues["AdmissionType"] == AdmissionType))
                {
                    ChangeTracker.OriginalValues.Remove("AdmissionType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AdmissionType", previousValue);
                }
                if (AdmissionType != null && !AdmissionType.ChangeTracker.ChangeTrackingEnabled)
                {
                    AdmissionType.StartTracking();
                }
            }
        }
    
        private void FixupInstitute(Institute previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Circulars.Contains(this))
            {
                previousValue.Circulars.Remove(this);
            }
    
            if (Institute != null)
            {
                if (!Institute.Circulars.Contains(this))
                {
                    Institute.Circulars.Add(this);
                }
    
                InstituteId = Institute.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Institute")
                    && (ChangeTracker.OriginalValues["Institute"] == Institute))
                {
                    ChangeTracker.OriginalValues.Remove("Institute");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Institute", previousValue);
                }
                if (Institute != null && !Institute.ChangeTracker.ChangeTrackingEnabled)
                {
                    Institute.StartTracking();
                }
            }
        }
    
        private void FixupComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    item.Circular = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Comments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Circular, this))
                    {
                        item.Circular = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Comments", item);
                    }
                }
            }
        }
    
        private void FixupSubjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Subject item in e.NewItems)
                {
                    item.Circular = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Subjects", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Subject item in e.OldItems)
                {
                    if (ReferenceEquals(item.Circular, this))
                    {
                        item.Circular = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Subjects", item);
                    }
                }
            }
        }

        #endregion
    }
}
