//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EduEnginee.Areas.Admission.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Circular))]
    [KnownType(typeof(Comment))]
    [KnownType(typeof(Country))]
    [KnownType(typeof(News))]
    [KnownType(typeof(Notice))]
    [KnownType(typeof(InstituteSubcatary))]
    public partial class Institute: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public int InstituteSubcataryId
        {
            get { return _instituteSubcataryId; }
            set
            {
                if (_instituteSubcataryId != value)
                {
                    ChangeTracker.RecordOriginalValue("InstituteSubcataryId", _instituteSubcataryId);
                    if (!IsDeserializing)
                    {
                        if (InstituteSubcatary != null && InstituteSubcatary.Id != value)
                        {
                            InstituteSubcatary = null;
                        }
                    }
                    _instituteSubcataryId = value;
                    OnPropertyChanged("InstituteSubcataryId");
                }
            }
        }
        private int _instituteSubcataryId;
    
        [DataMember]
        public Nullable<int> CountryId
        {
            get { return _countryId; }
            set
            {
                if (_countryId != value)
                {
                    ChangeTracker.RecordOriginalValue("CountryId", _countryId);
                    if (!IsDeserializing)
                    {
                        if (Country != null && Country.Id != value)
                        {
                            Country = null;
                        }
                    }
                    _countryId = value;
                    OnPropertyChanged("CountryId");
                }
            }
        }
        private Nullable<int> _countryId;
    
        [DataMember]
        public Nullable<bool> IsEnable
        {
            get { return _isEnable; }
            set
            {
                if (_isEnable != value)
                {
                    _isEnable = value;
                    OnPropertyChanged("IsEnable");
                }
            }
        }
        private Nullable<bool> _isEnable;
    
        [DataMember]
        public string CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private string _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> CreatedDate
        {
            get { return _createdDate; }
            set
            {
                if (_createdDate != value)
                {
                    _createdDate = value;
                    OnPropertyChanged("CreatedDate");
                }
            }
        }
        private Nullable<System.DateTime> _createdDate;
    
        [DataMember]
        public string UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private string _updatedBy;
    
        [DataMember]
        public Nullable<System.DateTime> UpdatedDate
        {
            get { return _updatedDate; }
            set
            {
                if (_updatedDate != value)
                {
                    _updatedDate = value;
                    OnPropertyChanged("UpdatedDate");
                }
            }
        }
        private Nullable<System.DateTime> _updatedDate;
    
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        private string _phone;
    
        [DataMember]
        public string EmailAddress
        {
            get { return _emailAddress; }
            set
            {
                if (_emailAddress != value)
                {
                    _emailAddress = value;
                    OnPropertyChanged("EmailAddress");
                }
            }
        }
        private string _emailAddress;
    
        [DataMember]
        public string WebSite
        {
            get { return _webSite; }
            set
            {
                if (_webSite != value)
                {
                    _webSite = value;
                    OnPropertyChanged("WebSite");
                }
            }
        }
        private string _webSite;
    
        [DataMember]
        public Nullable<System.DateTime> EstablishDate
        {
            get { return _establishDate; }
            set
            {
                if (_establishDate != value)
                {
                    _establishDate = value;
                    OnPropertyChanged("EstablishDate");
                }
            }
        }
        private Nullable<System.DateTime> _establishDate;
    
        [DataMember]
        public string LoDirectory
        {
            get { return _loDirectory; }
            set
            {
                if (_loDirectory != value)
                {
                    _loDirectory = value;
                    OnPropertyChanged("LoDirectory");
                }
            }
        }
        private string _loDirectory;
    
        [DataMember]
        public Nullable<int> NoOfMaleStd
        {
            get { return _noOfMaleStd; }
            set
            {
                if (_noOfMaleStd != value)
                {
                    _noOfMaleStd = value;
                    OnPropertyChanged("NoOfMaleStd");
                }
            }
        }
        private Nullable<int> _noOfMaleStd;
    
        [DataMember]
        public Nullable<int> NoOfFemaleStd
        {
            get { return _noOfFemaleStd; }
            set
            {
                if (_noOfFemaleStd != value)
                {
                    _noOfFemaleStd = value;
                    OnPropertyChanged("NoOfFemaleStd");
                }
            }
        }
        private Nullable<int> _noOfFemaleStd;
    
        [DataMember]
        public Nullable<int> NoOfTeacher
        {
            get { return _noOfTeacher; }
            set
            {
                if (_noOfTeacher != value)
                {
                    _noOfTeacher = value;
                    OnPropertyChanged("NoOfTeacher");
                }
            }
        }
        private Nullable<int> _noOfTeacher;
    
        [DataMember]
        public Nullable<int> NoOfMaleHostelSit
        {
            get { return _noOfMaleHostelSit; }
            set
            {
                if (_noOfMaleHostelSit != value)
                {
                    _noOfMaleHostelSit = value;
                    OnPropertyChanged("NoOfMaleHostelSit");
                }
            }
        }
        private Nullable<int> _noOfMaleHostelSit;
    
        [DataMember]
        public Nullable<int> NoOfFemaleHostelSit
        {
            get { return _noOfFemaleHostelSit; }
            set
            {
                if (_noOfFemaleHostelSit != value)
                {
                    _noOfFemaleHostelSit = value;
                    OnPropertyChanged("NoOfFemaleHostelSit");
                }
            }
        }
        private Nullable<int> _noOfFemaleHostelSit;
    
        [DataMember]
        public string Location
        {
            get { return _location; }
            set
            {
                if (_location != value)
                {
                    _location = value;
                    OnPropertyChanged("Location");
                }
            }
        }
        private string _location;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Circular> Circulars
        {
            get
            {
                if (_circulars == null)
                {
                    _circulars = new TrackableCollection<Circular>();
                    _circulars.CollectionChanged += FixupCirculars;
                }
                return _circulars;
            }
            set
            {
                if (!ReferenceEquals(_circulars, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_circulars != null)
                    {
                        _circulars.CollectionChanged -= FixupCirculars;
                    }
                    _circulars = value;
                    if (_circulars != null)
                    {
                        _circulars.CollectionChanged += FixupCirculars;
                    }
                    OnNavigationPropertyChanged("Circulars");
                }
            }
        }
        private TrackableCollection<Circular> _circulars;
    
        [DataMember]
        public TrackableCollection<Comment> Comments
        {
            get
            {
                if (_comments == null)
                {
                    _comments = new TrackableCollection<Comment>();
                    _comments.CollectionChanged += FixupComments;
                }
                return _comments;
            }
            set
            {
                if (!ReferenceEquals(_comments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_comments != null)
                    {
                        _comments.CollectionChanged -= FixupComments;
                    }
                    _comments = value;
                    if (_comments != null)
                    {
                        _comments.CollectionChanged += FixupComments;
                    }
                    OnNavigationPropertyChanged("Comments");
                }
            }
        }
        private TrackableCollection<Comment> _comments;
    
        [DataMember]
        public Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                    OnNavigationPropertyChanged("Country");
                }
            }
        }
        private Country _country;
    
        [DataMember]
        public TrackableCollection<News> News
        {
            get
            {
                if (_news == null)
                {
                    _news = new TrackableCollection<News>();
                    _news.CollectionChanged += FixupNews;
                }
                return _news;
            }
            set
            {
                if (!ReferenceEquals(_news, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_news != null)
                    {
                        _news.CollectionChanged -= FixupNews;
                    }
                    _news = value;
                    if (_news != null)
                    {
                        _news.CollectionChanged += FixupNews;
                    }
                    OnNavigationPropertyChanged("News");
                }
            }
        }
        private TrackableCollection<News> _news;
    
        [DataMember]
        public TrackableCollection<Notice> Notices
        {
            get
            {
                if (_notices == null)
                {
                    _notices = new TrackableCollection<Notice>();
                    _notices.CollectionChanged += FixupNotices;
                }
                return _notices;
            }
            set
            {
                if (!ReferenceEquals(_notices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notices != null)
                    {
                        _notices.CollectionChanged -= FixupNotices;
                    }
                    _notices = value;
                    if (_notices != null)
                    {
                        _notices.CollectionChanged += FixupNotices;
                    }
                    OnNavigationPropertyChanged("Notices");
                }
            }
        }
        private TrackableCollection<Notice> _notices;
    
        [DataMember]
        public InstituteSubcatary InstituteSubcatary
        {
            get { return _instituteSubcatary; }
            set
            {
                if (!ReferenceEquals(_instituteSubcatary, value))
                {
                    var previousValue = _instituteSubcatary;
                    _instituteSubcatary = value;
                    FixupInstituteSubcatary(previousValue);
                    OnNavigationPropertyChanged("InstituteSubcatary");
                }
            }
        }
        private InstituteSubcatary _instituteSubcatary;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Circulars.Clear();
            Comments.Clear();
            Country = null;
            News.Clear();
            Notices.Clear();
            InstituteSubcatary = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCountry(Country previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Institutes.Contains(this))
            {
                previousValue.Institutes.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.Institutes.Contains(this))
                {
                    Country.Institutes.Add(this);
                }
    
                CountryId = Country.Id;
            }
            else if (!skipKeys)
            {
                CountryId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Country")
                    && (ChangeTracker.OriginalValues["Country"] == Country))
                {
                    ChangeTracker.OriginalValues.Remove("Country");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Country", previousValue);
                }
                if (Country != null && !Country.ChangeTracker.ChangeTrackingEnabled)
                {
                    Country.StartTracking();
                }
            }
        }
    
        private void FixupInstituteSubcatary(InstituteSubcatary previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Institutes.Contains(this))
            {
                previousValue.Institutes.Remove(this);
            }
    
            if (InstituteSubcatary != null)
            {
                if (!InstituteSubcatary.Institutes.Contains(this))
                {
                    InstituteSubcatary.Institutes.Add(this);
                }
    
                InstituteSubcataryId = InstituteSubcatary.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InstituteSubcatary")
                    && (ChangeTracker.OriginalValues["InstituteSubcatary"] == InstituteSubcatary))
                {
                    ChangeTracker.OriginalValues.Remove("InstituteSubcatary");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InstituteSubcatary", previousValue);
                }
                if (InstituteSubcatary != null && !InstituteSubcatary.ChangeTracker.ChangeTrackingEnabled)
                {
                    InstituteSubcatary.StartTracking();
                }
            }
        }
    
        private void FixupCirculars(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Circular item in e.NewItems)
                {
                    item.Institute = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Circulars", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Circular item in e.OldItems)
                {
                    if (ReferenceEquals(item.Institute, this))
                    {
                        item.Institute = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Circulars", item);
                    }
                }
            }
        }
    
        private void FixupComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    item.Institute = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Comments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Institute, this))
                    {
                        item.Institute = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Comments", item);
                    }
                }
            }
        }
    
        private void FixupNews(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (News item in e.NewItems)
                {
                    item.Institute = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("News", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (News item in e.OldItems)
                {
                    if (ReferenceEquals(item.Institute, this))
                    {
                        item.Institute = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("News", item);
                    }
                }
            }
        }
    
        private void FixupNotices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Notice item in e.NewItems)
                {
                    item.Institute = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Notices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Notice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Institute, this))
                    {
                        item.Institute = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Notices", item);
                    }
                }
            }
        }

        #endregion
    }
}
