//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("tempModel", "ContinentCountry", "Continent", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EduEnginee.Models.Continent), "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EduEnginee.Models.Country), true)]
[assembly: EdmRelationshipAttribute("tempModel", "VisaTypeContinent", "VisaType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EduEnginee.Models.VisaType), "Continent", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EduEnginee.Models.Continent))]
[assembly: EdmRelationshipAttribute("tempModel", "CountryContact", "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EduEnginee.Models.Country), "Contact", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EduEnginee.Models.CouncellingFirm))]
[assembly: EdmRelationshipAttribute("tempModel", "VisaTypeCircular", "VisaType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EduEnginee.Models.VisaType), "Circular", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EduEnginee.Models.Circular), true)]
[assembly: EdmRelationshipAttribute("tempModel", "CountryCircular", "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EduEnginee.Models.Country), "Circular", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EduEnginee.Models.Circular), true)]

#endregion

namespace EduEnginee.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class tempModelContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new tempModelContainer object using the connection string found in the 'tempModelContainer' section of the application configuration file.
        /// </summary>
        public tempModelContainer() : base("name=tempModelContainer", "tempModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new tempModelContainer object.
        /// </summary>
        public tempModelContainer(string connectionString) : base(connectionString, "tempModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new tempModelContainer object.
        /// </summary>
        public tempModelContainer(EntityConnection connection) : base(connection, "tempModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Continent> ContinentSet
        {
            get
            {
                if ((_ContinentSet == null))
                {
                    _ContinentSet = base.CreateObjectSet<Continent>("ContinentSet");
                }
                return _ContinentSet;
            }
        }
        private ObjectSet<Continent> _ContinentSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> CountrySet
        {
            get
            {
                if ((_CountrySet == null))
                {
                    _CountrySet = base.CreateObjectSet<Country>("CountrySet");
                }
                return _CountrySet;
            }
        }
        private ObjectSet<Country> _CountrySet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VisaType> VisaTypeSet
        {
            get
            {
                if ((_VisaTypeSet == null))
                {
                    _VisaTypeSet = base.CreateObjectSet<VisaType>("VisaTypeSet");
                }
                return _VisaTypeSet;
            }
        }
        private ObjectSet<VisaType> _VisaTypeSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CouncellingFirm> CouncellingFirmSet
        {
            get
            {
                if ((_CouncellingFirmSet == null))
                {
                    _CouncellingFirmSet = base.CreateObjectSet<CouncellingFirm>("CouncellingFirmSet");
                }
                return _CouncellingFirmSet;
            }
        }
        private ObjectSet<CouncellingFirm> _CouncellingFirmSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Circular> CircularSet
        {
            get
            {
                if ((_CircularSet == null))
                {
                    _CircularSet = base.CreateObjectSet<Circular>("CircularSet");
                }
                return _CircularSet;
            }
        }
        private ObjectSet<Circular> _CircularSet;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ContinentSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToContinentSet(Continent continent)
        {
            base.AddObject("ContinentSet", continent);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CountrySet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountrySet(Country country)
        {
            base.AddObject("CountrySet", country);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VisaTypeSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVisaTypeSet(VisaType visaType)
        {
            base.AddObject("VisaTypeSet", visaType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CouncellingFirmSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCouncellingFirmSet(CouncellingFirm councellingFirm)
        {
            base.AddObject("CouncellingFirmSet", councellingFirm);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CircularSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCircularSet(Circular circular)
        {
            base.AddObject("CircularSet", circular);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="tempModel", Name="Circular")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Circular : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Circular object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="visaTypeId">Initial value of the VisaTypeId property.</param>
        /// <param name="countryId">Initial value of the CountryId property.</param>
        public static Circular CreateCircular(global::System.Int32 id, global::System.Int32 visaTypeId, global::System.Int32 countryId)
        {
            Circular circular = new Circular();
            circular.Id = id;
            circular.VisaTypeId = visaTypeId;
            circular.CountryId = countryId;
            return circular;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 VisaTypeId
        {
            get
            {
                return _VisaTypeId;
            }
            set
            {
                OnVisaTypeIdChanging(value);
                ReportPropertyChanging("VisaTypeId");
                _VisaTypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("VisaTypeId");
                OnVisaTypeIdChanged();
            }
        }
        private global::System.Int32 _VisaTypeId;
        partial void OnVisaTypeIdChanging(global::System.Int32 value);
        partial void OnVisaTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CountryId
        {
            get
            {
                return _CountryId;
            }
            set
            {
                OnCountryIdChanging(value);
                ReportPropertyChanging("CountryId");
                _CountryId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CountryId");
                OnCountryIdChanged();
            }
        }
        private global::System.Int32 _CountryId;
        partial void OnCountryIdChanging(global::System.Int32 value);
        partial void OnCountryIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "VisaTypeCircular", "VisaType")]
        public VisaType VisaType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisaType>("tempModel.VisaTypeCircular", "VisaType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisaType>("tempModel.VisaTypeCircular", "VisaType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<VisaType> VisaTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<VisaType>("tempModel.VisaTypeCircular", "VisaType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<VisaType>("tempModel.VisaTypeCircular", "VisaType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "CountryCircular", "Country")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("tempModel.CountryCircular", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("tempModel.CountryCircular", "Country").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("tempModel.CountryCircular", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("tempModel.CountryCircular", "Country", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="tempModel", Name="Continent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Continent : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Continent object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        public static Continent CreateContinent(global::System.Int32 id, global::System.String title)
        {
            Continent continent = new Continent();
            continent.Id = id;
            continent.Title = title;
            return continent;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "ContinentCountry", "Country")]
        public EntityCollection<Country> Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Country>("tempModel.ContinentCountry", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Country>("tempModel.ContinentCountry", "Country", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "VisaTypeContinent", "VisaType")]
        public EntityCollection<VisaType> VisaType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<VisaType>("tempModel.VisaTypeContinent", "VisaType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<VisaType>("tempModel.VisaTypeContinent", "VisaType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="tempModel", Name="CouncellingFirm")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CouncellingFirm : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CouncellingFirm object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static CouncellingFirm CreateCouncellingFirm(global::System.Int32 id)
        {
            CouncellingFirm councellingFirm = new CouncellingFirm();
            councellingFirm.Id = id;
            return councellingFirm;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "CountryContact", "Country")]
        public EntityCollection<Country> Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Country>("tempModel.CountryContact", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Country>("tempModel.CountryContact", "Country", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="tempModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="continentId">Initial value of the ContinentId property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        public static Country CreateCountry(global::System.Int32 id, global::System.Int32 continentId, global::System.String title)
        {
            Country country = new Country();
            country.Id = id;
            country.ContinentId = continentId;
            country.Title = title;
            return country;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ContinentId
        {
            get
            {
                return _ContinentId;
            }
            set
            {
                OnContinentIdChanging(value);
                ReportPropertyChanging("ContinentId");
                _ContinentId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContinentId");
                OnContinentIdChanged();
            }
        }
        private global::System.Int32 _ContinentId;
        partial void OnContinentIdChanging(global::System.Int32 value);
        partial void OnContinentIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "ContinentCountry", "Continent")]
        public Continent Continent
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Continent>("tempModel.ContinentCountry", "Continent").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Continent>("tempModel.ContinentCountry", "Continent").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Continent> ContinentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Continent>("tempModel.ContinentCountry", "Continent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Continent>("tempModel.ContinentCountry", "Continent", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "CountryContact", "Contact")]
        public EntityCollection<CouncellingFirm> Contact
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CouncellingFirm>("tempModel.CountryContact", "Contact");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CouncellingFirm>("tempModel.CountryContact", "Contact", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "CountryCircular", "Circular")]
        public EntityCollection<Circular> Circular
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Circular>("tempModel.CountryCircular", "Circular");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Circular>("tempModel.CountryCircular", "Circular", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="tempModel", Name="VisaType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VisaType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VisaType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        public static VisaType CreateVisaType(global::System.Int32 id, global::System.String title)
        {
            VisaType visaType = new VisaType();
            visaType.Id = id;
            visaType.Title = title;
            return visaType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "VisaTypeContinent", "Continent")]
        public EntityCollection<Continent> Continent
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Continent>("tempModel.VisaTypeContinent", "Continent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Continent>("tempModel.VisaTypeContinent", "Continent", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("tempModel", "VisaTypeCircular", "Circular")]
        public EntityCollection<Circular> Circular
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Circular>("tempModel.VisaTypeCircular", "Circular");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Circular>("tempModel.VisaTypeCircular", "Circular", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
